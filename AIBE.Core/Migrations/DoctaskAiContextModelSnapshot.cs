// <auto-generated />
using System;
using AIBE.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIBE.Core.Migrations
{
    [DbContext(typeof(DoctaskAiContext))]
    partial class DoctaskAiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIBE.Core.Models.Frequency", b =>
                {
                    b.Property<int>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("frequencyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrequencyId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FrequencyDetail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("frequencyDetail");

                    b.Property<string>("FrequencyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("frequencyType");

                    b.Property<int>("IntervalValue")
                        .HasColumnType("int")
                        .HasColumnName("intervalValue");

                    b.HasKey("FrequencyId");

                    b.ToTable("frequency", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.FrequencyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int")
                        .HasColumnName("dayOfMonth");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("dayOfWeek");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("frequencyId");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyId");

                    b.ToTable("frequency_detail", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("taskId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Org", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orgId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("orgName");

                    b.Property<int?>("ParentOrgId")
                        .HasColumnType("int")
                        .HasColumnName("parentOrgId");

                    b.HasKey("OrgId");

                    b.ToTable("org", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("periodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("periodName");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("PeriodId");

                    b.ToTable("period", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("positionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("positionName");

                    b.HasKey("PositionId");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("progressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fileName");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filePath");

                    b.Property<int?>("PercentageComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("percentageComplete");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("periodId");

                    b.Property<string>("Proposal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("proposal");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("result");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("taskId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updatedBy");

                    b.HasKey("ProgressId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("progress", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Reminder", b =>
                {
                    b.Property<int>("Reminderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reminderid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reminderid"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Createdby")
                        .HasColumnType("int")
                        .HasColumnName("createdby");

                    b.Property<bool?>("Isauto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isauto");

                    b.Property<bool?>("Isnotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isnotified");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("Notificationid")
                        .HasColumnType("int")
                        .HasColumnName("notificationid");

                    b.Property<DateTime?>("Notifiedat")
                        .HasColumnType("datetime")
                        .HasColumnName("notifiedat");

                    b.Property<int?>("Periodid")
                        .HasColumnType("int")
                        .HasColumnName("periodid");

                    b.Property<int>("Taskid")
                        .HasColumnType("int")
                        .HasColumnName("taskid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("Triggertime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("triggertime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Reminderid");

                    b.HasIndex("Createdby");

                    b.HasIndex("Notificationid");

                    b.HasIndex("Periodid");

                    b.HasIndex("Taskid");

                    b.HasIndex("UserId");

                    b.ToTable("reminder", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Reminderunit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Reminderid")
                        .HasColumnType("int")
                        .HasColumnName("reminderid");

                    b.Property<int>("Unitid")
                        .HasColumnType("int")
                        .HasColumnName("unitid");

                    b.HasKey("Id");

                    b.HasIndex("Reminderid");

                    b.HasIndex("Unitid");

                    b.ToTable("reminderunit", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.ReportReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int>("ProgressId")
                        .HasColumnType("int")
                        .HasColumnName("progressId");

                    b.Property<DateTime>("ReviewedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("reviewed_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("reviewer_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("ReviewId")
                        .HasName("PK__report_r__2ECD6E04C573B4B5");

                    b.HasIndex("ProgressId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("report_review", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Reportsummary", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("createdBy");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("periodId");

                    b.Property<int?>("ReportFile")
                        .HasColumnType("int")
                        .HasColumnName("reportFile");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("taskId");

                    b.HasKey("ReportId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReportFile");

                    b.HasIndex("TaskId");

                    b.ToTable("reportsummary", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Role", b =>
                {
                    b.Property<int>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Roleid"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rolename");

                    b.HasKey("Roleid");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("taskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int")
                        .HasColumnName("assigneeId");

                    b.Property<int?>("AssignerId")
                        .HasColumnType("int")
                        .HasColumnName("assignerId");

                    b.Property<int?>("AttachedFile")
                        .HasColumnType("int")
                        .HasColumnName("attachedFile");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("dueDate");

                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("frequencyId");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int")
                        .HasColumnName("orgId");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("parentTaskId");

                    b.Property<int?>("Percentagecomplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("percentagecomplete");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("periodId");

                    b.Property<string>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("medium")
                        .HasColumnName("priority");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unitId");

                    b.HasKey("TaskId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Taskunitassignment", b =>
                {
                    b.Property<int>("TaskUnitAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskUnitAssignmentId"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TaskUnitAssignmentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnitId");

                    b.ToTable("taskunitassignment", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unitId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<int>("OrgId")
                        .HasColumnType("int")
                        .HasColumnName("orgId");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("official")
                        .HasColumnName("type");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("unitName");

                    b.Property<int?>("UnitParent")
                        .HasColumnType("int")
                        .HasColumnName("unitParent");

                    b.HasKey("UnitId");

                    b.HasIndex("OrgId");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Unituser", b =>
                {
                    b.Property<int>("UnitUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unitUserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitUserId"));

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unitId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("UnitUserId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("unituser", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Uploadfile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fileId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filePath");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("uploadedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("int")
                        .HasColumnName("uploadedBy");

                    b.HasKey("FileId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("uploadfile", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullName");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int")
                        .HasColumnName("orgId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("positionId");

                    b.Property<string>("PositionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("positionName");

                    b.Property<string>("Refreshtoken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refreshtoken");

                    b.Property<DateTime?>("Refreshtokenexpirytime")
                        .HasColumnType("datetime")
                        .HasColumnName("refreshtokenexpirytime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasDefaultValue("0")
                        .HasColumnName("role");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unitId");

                    b.Property<int?>("UnitUserId")
                        .HasColumnType("int")
                        .HasColumnName("unitUserId");

                    b.Property<int?>("UserParent")
                        .HasColumnType("int")
                        .HasColumnName("userParent");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitUserId");

                    b.HasIndex("UserParent");

                    b.HasIndex(new[] { "Email" }, "UQ_user_email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ_user_username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.Userrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Roleid")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("userrole", (string)null);
                });

            modelBuilder.Entity("Taskassignee", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("taskassignees", (string)null);
                });

            modelBuilder.Entity("AIBE.Core.Models.FrequencyDetail", b =>
                {
                    b.HasOne("AIBE.Core.Models.Frequency", "Frequency")
                        .WithMany("FrequencyDetails")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_frequency_detail_frequency");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("AIBE.Core.Models.Notification", b =>
                {
                    b.HasOne("AIBE.Core.Models.Task", "Task")
                        .WithMany("Notifications")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkNotificationTask");

                    b.HasOne("AIBE.Core.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkNotificationUser");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIBE.Core.Models.Progress", b =>
                {
                    b.HasOne("AIBE.Core.Models.Period", "Period")
                        .WithMany("Progresses")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkProgressPeriod");

                    b.HasOne("AIBE.Core.Models.Task", "Task")
                        .WithMany("Progresses")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkProgressTask");

                    b.HasOne("AIBE.Core.Models.User", "UpdatedByNavigation")
                        .WithMany("Progresses")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkProgressUpdatedBy");

                    b.Navigation("Period");

                    b.Navigation("Task");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("AIBE.Core.Models.Reminder", b =>
                {
                    b.HasOne("AIBE.Core.Models.User", "CreatedbyNavigation")
                        .WithMany("ReminderCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("reminder_ibfk_3");

                    b.HasOne("AIBE.Core.Models.Notification", "Notification")
                        .WithMany("Reminders")
                        .HasForeignKey("Notificationid")
                        .HasConstraintName("reminder_ibfk_4");

                    b.HasOne("AIBE.Core.Models.Period", "Period")
                        .WithMany("Reminders")
                        .HasForeignKey("Periodid")
                        .HasConstraintName("reminder_ibfk_2");

                    b.HasOne("AIBE.Core.Models.Task", "Task")
                        .WithMany("Reminders")
                        .HasForeignKey("Taskid")
                        .IsRequired()
                        .HasConstraintName("reminder_ibfk_1");

                    b.HasOne("AIBE.Core.Models.User", "User")
                        .WithMany("ReminderUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_reminder_User_UserId");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("Notification");

                    b.Navigation("Period");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIBE.Core.Models.Reminderunit", b =>
                {
                    b.HasOne("AIBE.Core.Models.Reminder", "Reminder")
                        .WithMany("Reminderunits")
                        .HasForeignKey("Reminderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reminder");

                    b.HasOne("AIBE.Core.Models.Unit", "Unit")
                        .WithMany("Reminderunits")
                        .HasForeignKey("Unitid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unit");

                    b.Navigation("Reminder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AIBE.Core.Models.ReportReview", b =>
                {
                    b.HasOne("AIBE.Core.Models.Progress", "Progress")
                        .WithMany("ReportReviews")
                        .HasForeignKey("ProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportReview_Progress");

                    b.HasOne("AIBE.Core.Models.User", "Reviewer")
                        .WithMany("ReportReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ReportReview_User");

                    b.Navigation("Progress");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("AIBE.Core.Models.Reportsummary", b =>
                {
                    b.HasOne("AIBE.Core.Models.User", "CreatedByNavigation")
                        .WithMany("Reportsummaries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkReportCreatedBy");

                    b.HasOne("AIBE.Core.Models.Period", "Period")
                        .WithMany("Reportsummaries")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkReportPeriod");

                    b.HasOne("AIBE.Core.Models.Uploadfile", "ReportFileNavigation")
                        .WithMany("Reportsummaries")
                        .HasForeignKey("ReportFile")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkReportFile");

                    b.HasOne("AIBE.Core.Models.Task", "Task")
                        .WithMany("Reportsummaries")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkReportTask");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Period");

                    b.Navigation("ReportFileNavigation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("AIBE.Core.Models.Task", b =>
                {
                    b.HasOne("AIBE.Core.Models.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkTaskAssignee");

                    b.HasOne("AIBE.Core.Models.Frequency", "Frequency")
                        .WithMany("Tasks")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_taskitem_frequency");

                    b.Navigation("Assignee");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("AIBE.Core.Models.Taskunitassignment", b =>
                {
                    b.HasOne("AIBE.Core.Models.Task", "Task")
                        .WithMany("Taskunitassignments")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("taskunitassignment_ibfk_1");

                    b.HasOne("AIBE.Core.Models.Unit", "Unit")
                        .WithMany("Taskunitassignments")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("taskunitassignment_ibfk_2");

                    b.Navigation("Task");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AIBE.Core.Models.Unit", b =>
                {
                    b.HasOne("AIBE.Core.Models.Org", "Org")
                        .WithMany("Units")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkUnitOrg");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("AIBE.Core.Models.Unituser", b =>
                {
                    b.HasOne("AIBE.Core.Models.Unit", "Unit")
                        .WithMany("Unitusers")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkUnitUserUnit");

                    b.HasOne("AIBE.Core.Models.User", "User")
                        .WithMany("Unitusers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkUnitUserUser");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIBE.Core.Models.Uploadfile", b =>
                {
                    b.HasOne("AIBE.Core.Models.User", "UploadedByNavigation")
                        .WithMany("Uploadfiles")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkUploadFileUploadedBy");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("AIBE.Core.Models.User", b =>
                {
                    b.HasOne("AIBE.Core.Models.Org", "Org")
                        .WithMany("Users")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("user_ibfk_2");

                    b.HasOne("AIBE.Core.Models.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("user_ibfk_1");

                    b.HasOne("AIBE.Core.Models.Unit", "Unit")
                        .WithMany("Users")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("user_ibfk_3");

                    b.HasOne("AIBE.Core.Models.Unituser", "UnitUser")
                        .WithMany("Users")
                        .HasForeignKey("UnitUserId")
                        .HasConstraintName("fk_user_unitUser");

                    b.HasOne("AIBE.Core.Models.User", "UserParentNavigation")
                        .WithMany("InverseUserParentNavigation")
                        .HasForeignKey("UserParent")
                        .HasConstraintName("user_ibfk_4");

                    b.Navigation("Org");

                    b.Navigation("Position");

                    b.Navigation("Unit");

                    b.Navigation("UnitUser");

                    b.Navigation("UserParentNavigation");
                });

            modelBuilder.Entity("AIBE.Core.Models.Userrole", b =>
                {
                    b.HasOne("AIBE.Core.Models.Role", "Role")
                        .WithMany("Userroles")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrole_role");

                    b.HasOne("AIBE.Core.Models.User", "User")
                        .WithMany("Userroles")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrole_user");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskassignee", b =>
                {
                    b.HasOne("AIBE.Core.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("taskassignees_ibfk_1");

                    b.HasOne("AIBE.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("taskassignees_ibfk_2");
                });

            modelBuilder.Entity("AIBE.Core.Models.Frequency", b =>
                {
                    b.Navigation("FrequencyDetails");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("AIBE.Core.Models.Notification", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("AIBE.Core.Models.Org", b =>
                {
                    b.Navigation("Units");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIBE.Core.Models.Period", b =>
                {
                    b.Navigation("Progresses");

                    b.Navigation("Reminders");

                    b.Navigation("Reportsummaries");
                });

            modelBuilder.Entity("AIBE.Core.Models.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIBE.Core.Models.Progress", b =>
                {
                    b.Navigation("ReportReviews");
                });

            modelBuilder.Entity("AIBE.Core.Models.Reminder", b =>
                {
                    b.Navigation("Reminderunits");
                });

            modelBuilder.Entity("AIBE.Core.Models.Role", b =>
                {
                    b.Navigation("Userroles");
                });

            modelBuilder.Entity("AIBE.Core.Models.Task", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Progresses");

                    b.Navigation("Reminders");

                    b.Navigation("Reportsummaries");

                    b.Navigation("Taskunitassignments");
                });

            modelBuilder.Entity("AIBE.Core.Models.Unit", b =>
                {
                    b.Navigation("Reminderunits");

                    b.Navigation("Taskunitassignments");

                    b.Navigation("Unitusers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIBE.Core.Models.Unituser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIBE.Core.Models.Uploadfile", b =>
                {
                    b.Navigation("Reportsummaries");
                });

            modelBuilder.Entity("AIBE.Core.Models.User", b =>
                {
                    b.Navigation("InverseUserParentNavigation");

                    b.Navigation("Notifications");

                    b.Navigation("Progresses");

                    b.Navigation("ReminderCreatedbyNavigations");

                    b.Navigation("ReminderUsers");

                    b.Navigation("ReportReviews");

                    b.Navigation("Reportsummaries");

                    b.Navigation("Tasks");

                    b.Navigation("Unitusers");

                    b.Navigation("Uploadfiles");

                    b.Navigation("Userroles");
                });
#pragma warning restore 612, 618
        }
    }
}
